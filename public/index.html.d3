<!DOCTYPE html>
<meta charset="utf-8">
<style>

.node rect {
  cursor: pointer;
  fill: #fff;
  fill-opacity: .5;
  stroke: #3182bd;
  stroke-width: 1.5px;
}

.node text {
  font: 10px sans-serif;
  pointer-events: none;
}

path.link {
  fill: none;
  stroke: #9ecae1;
  stroke-width: 1.5px;
}

</style>
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">

<!-- Optional theme -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css">

<!-- Latest compiled and minified JavaScript -->
<body>
  <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Project name</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#">Home</a></li>
            <li><a href="#about">About</a></li>
            <li><a href="#contact">Contact</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

    <div class="container-fluid" >
<div class="row">
<div class="col-md-5" id="tree">
</div>
<div class="col-md-7" style="padding-top:50px">
  <h3 id="oid_name"></h3>
  <h4 id="oid"></h4>
  <span id="oid_description"></span>
</div>
</div>
</div>
<script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var margin = {top: 90, right: 20, bottom: 30, left: 20},
    margin2 = {top: 30, right: 20, bottom: 30, left: 20},
    width = 360 - margin.left - margin.right,
    barHeight = 20,
    barWidth = width * .8;


var i = 0,
    duration = 110,
    last_click = null,
    root;

var tree_hdr = d3.layout.tree()
    .nodeSize([0, 100]);
var tree = d3.layout.tree()
    .nodeSize([0, 20]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

//var svg2 = d3.select("body").append("svg")
//    .attr("width", width + margin2.left + margin2.right)
//  .append("g")
//    .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");
var svg = d3.select("#tree").append("svg")
    .attr("width", width + margin.left + margin.right)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.json("/query/0", function(error, flare) {
  flare.x0 = 0;
  flare.y0 = 0;
  update(root = flare);
  //update2(root=[{name:'bacon'},{name:'cheese'},{name:'cheddar'}]);
});

function update2(source) {
  var nodes = tree_hdr.nodes(root);
  var height = 100;
  

}
 

function update(source) {

  // Compute the flattened node list. TODO use d3.layout.hierarchy.
  var nodes = tree.nodes(root);

  var height = Math.max(500, nodes.length * barHeight + margin.top + margin.bottom);

  //d3.selectAll("g.node").remove();
  d3.select("svg").transition()
      .duration(duration)
      .attr("height", height);

  d3.select(self.frameElement).transition()
      .duration(duration)
      .style("height", height + "px");

  // Compute the "layout".
  nodes.forEach(function(n, i) {
    n.x = i * barHeight;
  });

  // Update the nodes…
  var node = svg.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  var nodeEnter = node.enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .style("opacity", 1e-6);

  // Enter any new nodes at the parent's previous position.
  nodeEnter.append("rect")
      .attr("y", -barHeight / 2)
      .attr("height", barHeight)
      .attr("width", barWidth)
      .style("fill", color)
      .on("click", click);

  nodeEnter.append("text")
      .attr("dy", 3.5)
      .attr("dx", 5.5)
      .text(function(d) { return d.oid_name + " [" + d.oid + "] "; });

  // Transition nodes to their new position.
  nodeEnter.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
      .style("opacity", 1);

  node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
      .style("opacity", 1)
    .select("rect")
      .style("fill", color);

  // Transition exiting nodes to the parent's new position.
  node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .style("opacity", 1e-6)
      .remove();

  // Update the links…
  var link = svg.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

//// Toggle children on click.
function click(d) {
  last_click = d;
  d3.json("/query/" + d.id, function(error, flare) {
    flare.x0 = 0;
    flare.y0 = 0;
    d.children = flare.children
    for (var v = d;v.parent != null; v=v.parent) {
      var idx = v.parent.children.indexOf(v);
      if (idx != -1) {
      for (var i=v.parent.children.length - 1; i >=0;i--) {
          if (i != idx) {
	    v.parent.children.splice(i,1);
	  }
        }
      }
    }
    
    update(root );
  });
}
// Toggle children on click.
//function click(d) {
  //if (d.children) {
//    d._children = d.children;
//    d.children = null;
//  } else {
//    d.children = d._children;
//    d._children = null;
//  }
//  update(d);
//}

function color(d) {
  // return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#fd8d3c";
  if (d == last_click) {
	  return "#00ff00";
  }
   return d.children ? "#c6dbef" : d.child_flag ? "#3182bd" : "fd8d3c";
}

</script>

